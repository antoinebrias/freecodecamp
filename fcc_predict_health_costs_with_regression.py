# -*- coding: utf-8 -*-
"""fcc_predict_health_costs_with_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/freeCodeCamp/boilerplate-linear-regression-health-costs-calculator/blob/master/fcc_predict_health_costs_with_regression.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries. You may or may not use all of these.
!pip install -q git+https://github.com/tensorflow/docs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

from sklearn.linear_model import LinearRegression

# Import data
!wget https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv
dataset = pd.read_csv('insurance.csv')
dataset.tail()

df = dataset
df.head()

df.isna().sum()
df = df.dropna()



# @title region

from matplotlib import pyplot as plt
import seaborn as sns
df.groupby('region').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# convert categorical data to numbers
numeric_var = {"sex": {"male":0, "female":1}, "smoker":{"yes":1,"no":0}}
df = df.replace(numeric_var)
#print(df)

# get the dummies and store it in a variable
dummies = pd.get_dummies(df.region, dtype=int)

# Concatenate the dummies to original dataframe
merged = pd.concat([df, dummies], axis='columns')

# drop the values 'drop southwest???
merged.drop(['region', 'southwest'], axis='columns', inplace=True)

print(merged)

# train dataset and test dataset
train_dataset = merged.sample(frac=0.8, random_state=0)
test_dataset = merged.drop(train_dataset.index)

sns.pairplot(train_dataset[['expenses', 'age', 'sex', 'northeast']], diag_kind='kde')

train_dataset.describe().transpose()

train_features = train_dataset.copy()
test_features = test_dataset.copy()

train_labels = train_features.pop('expenses')
test_labels = test_features.pop('expenses')

print(train_labels)

train_dataset.describe().transpose()[['mean', 'std']]
normalizer = tf.keras.layers.Normalization(axis=-1)
normalizer.adapt(np.array(train_features))
print(normalizer.mean.numpy())
first = np.array(train_features[:1])

with np.printoptions(precision=2, suppress=True):
  print('First example:', first)
  print()
  print('Normalized:', normalizer(first).numpy())

print(train_features.columns)

# uni variate linear regression
age_lin_reg = np.array(train_features['age'])

age_lin_reg_normalizer = layers.Normalization(input_shape=[1,], axis=None)
age_lin_reg_normalizer.adapt(age_lin_reg)

age_model = tf.keras.Sequential([
    age_lin_reg_normalizer,
    layers.Dense(units=1)
])

age_model.summary()

age_model.predict(age_lin_reg[:10])

age_model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.1),
    loss='mean_absolute_error')

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = age_model.fit(
#     train_features['age'],
#     train_labels,
#     epochs=100,
#     # Suppress logging.
#     verbose=0,
#     # Calculate validation results on 20% of the training data.
#     validation_split = 0.2)
#

hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()

def plot_loss(history):
  plt.plot(history.history['loss'], label='loss')
  plt.plot(history.history['val_loss'], label='val_loss')

  plt.xlabel('Epoch')
  plt.ylabel('Error [expenses]')
  plt.legend()
  plt.grid(True)

plot_loss(history)

test_results = {}

test_results['age_model'] = age_model.evaluate(
    test_features['age'],
    test_labels, verbose=0)

x = tf.linspace(0.0, 100, 101)
y = age_model.predict(x)

def plot_age(x, y):
  plt.scatter(train_features['age'], train_labels, label='Data')
  plt.plot(x, y, color='k', label='Predictions')
  plt.xlabel('age')
  plt.ylabel('expenses')
  plt.legend()

plot_age(x, y)

print(train_features['age'])

#sk univariate linear regression
reg = LinearRegression().fit(train_features[['age']],train_labels)

Y=reg.predict(x.numpy().reshape(-1, 1))

plot_age(x,Y)

#sk multivariate linear regression
multi_reg = LinearRegression().fit(train_features,train_labels)

# keras multivariate linear regression
linear_model = tf.keras.Sequential([
    normalizer,
    layers.Dense(units=1)
])
linear_model.predict(train_features[:10])

linear_model.layers[1].kernel

linear_model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.1),
    loss='mean_absolute_error')

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = linear_model.fit(
#     train_features,
#     train_labels,
#     epochs=100,
#     # Suppress logging.
#     verbose=0,
#     # Calculate validation results on 20% of the training data.
#     validation_split = 0.2)
#

plot_loss(history)

test_results['linear_model'] = linear_model.evaluate(
    test_features, test_labels, verbose=0)

# NN
def build_and_compile_model(norm):
  model = keras.Sequential([
      norm,
      layers.Dense(64, activation='relu'),
      layers.Dense(64, activation='relu'),
      layers.Dense(1)
  ])

  model.compile(loss='mean_absolute_error',metrics=['mae', 'mse'],
                optimizer=tf.keras.optimizers.Adam(0.001))

  return model

dnn_age_model = build_and_compile_model(age_lin_reg_normalizer)

dnn_age_model.summary()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = dnn_age_model.fit(
#     train_features['age'],
#     train_labels,
#     validation_split=0.2,
#     verbose=0, epochs=100)
#

plot_loss(history)

y = dnn_age_model.predict(x)

plot_age(x, y)

test_results['dnn_age_model'] = dnn_age_model.evaluate(
    test_features['age'], test_labels,
    verbose=0)

dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = dnn_model.fit(
#     train_features,
#     train_labels,
#     validation_split=0.2,
#     verbose=0, epochs=100)
#

plot_loss(history)

test_results['dnn_model'] = dnn_model.evaluate(test_features, test_labels, verbose=0)

pd.DataFrame(test_results, index=['Mean absolute error [expenses]']).T

test_predictions = dnn_model.predict(test_features).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True Values [expenses]')
plt.ylabel('Predictions [expenses]')
lims = [0, 70000]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims, lims)

error = test_predictions - test_labels
plt.hist(error, bins=25)
plt.xlabel('Prediction Error [expenses]')
_ = plt.ylabel('Count')

# reload
dnn_model.save('dnn_model.keras')
#reloaded = tf.keras.models.load_model('dnn_model.keras')

#test_results['reloaded'] = reloaded.evaluate(
#    test_features, test_labels, verbose=0)
#pd.DataFrame(test_results, index=['Mean absolute error [expenses]']).T

model = dnn_model

test_features.head()

test_dataset.head()

loss, mae, mse = dnn_model.evaluate(train_features, train_labels)

print(mae)

loss, mae, mse = dnn_model.evaluate(test_features, test_labels)

loss, mae, mse = dnn_model.evaluate(test_features, test_labels)

# RUN THIS CELL TO TEST YOUR MODEL. DO NOT MODIFY CONTENTS.
# Test model by checking how well the model generalizes using the test set.
loss, mae, mse = model.evaluate(test_features, test_labels, verbose=2)

print("Testing set Mean Abs Error: {:5.2f} expenses".format(mae))

if mae < 3500:
  print("You passed the challenge. Great job!")
else:
  print("The Mean Abs Error must be less than 3500. Keep trying.")

# Plot predictions.
test_predictions = model.predict(test_features).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True values (expenses)')
plt.ylabel('Predictions (expenses)')
lims = [0, 50000]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims,lims)